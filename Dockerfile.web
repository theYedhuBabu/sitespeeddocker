# Base Nginx image
FROM nginx:alpine

# Install Node.js, npm, and Docker CLI
# hadolint ignore=DL3018
RUN apk add --no-cache nodejs npm docker-cli

# Set working directory for the Node.js application
WORKDIR /app

# Copy package.json and package-lock.json (if they exist)
# These files define your Node.js dependencies.
COPY package*.json ./
COPY sitespeed-config.json /app/sitespeed-config.json

# Install Node.js dependencies for your server.js
# Using --omit=dev to skip development dependencies in the final image
RUN npm install --omit=dev
# Copy your Node.js backend server code
COPY .env .
COPY server.js .
# If you have other .js files or modules for your backend, copy them too. E.g.:
# COPY ./lib /app/lib

# --- Nginx and Frontend Setup ---

# Copy static frontend files to Nginx's serving directory
COPY index.html /usr/share/nginx/html/
COPY style.css /usr/share/nginx/html/
COPY script.js /usr/share/nginx/html/
COPY images/ /usr/share/nginx/html/images/

# Create directories for uploads (used by Node.js/Multer) and results (used by Sitespeed.io)
# The actual data will be on volumes, but the directories should exist in the container.
RUN mkdir -p /app/uploads && \
    mkdir -p /usr/share/nginx/html/results
    # Permissions:
    # The 'chown' commands you had:
    # chown -R nginx:nginx /app/uploads
    # chown -R nginx:nginx /usr/share/nginx/html/results
    # - /app/uploads: Written to by your Node.js app. If Node runs as root (default without further config),
    #   it can write here. If it runs as 'node' user, it might need permissions.
    # - /usr/share/nginx/html/results: Written to by the Sitespeed.io container (likely as root within that container)
    #   via a volume. Nginx (running as 'nginx' user) primarily needs to read from here.
    # For simplicity now, ensure the directories are created. The processes writing to them
    # (Node app, Sitespeed.io container) will use their own UIDs, which will reflect on the host volume.
    # Nginx (as 'nginx' user) should typically have read access to /usr/share/nginx/html/results.

# Copy your custom Nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 80 for Nginx
EXPOSE 80

# Command to start the Node.js application (in the background)
# and Nginx (in the foreground)
# Note: server.js listens on port 3000, which Nginx proxies to.
CMD sh -c "node /app/server.js & nginx -g 'daemon off;'"